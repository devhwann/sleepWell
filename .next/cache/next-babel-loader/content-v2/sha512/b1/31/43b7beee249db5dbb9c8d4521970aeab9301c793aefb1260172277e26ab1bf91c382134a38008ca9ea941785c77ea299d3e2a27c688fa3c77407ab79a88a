{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/hwan/Desktop/workspace/MostProject/sleepWell/src/components/calc/Guid/SleepGuid.tsx\";\n// import React from 'react';\n// import { Line } from 'react-chartjs-2';\n// import { Chart } from 'chart.js';\n// interface options {\n//   scale: string;\n//   yAxes: string;\n//   ticks: string;\n//   display: boolean;\n// }\n// interface AppProps {}\n// const data = {\n//   labels: ['자정', '2', '3', '4', '5', '6', '7', '8'],\n//   datasets: [\n//     {\n//       label: '수면 주기',\n//       display: false,\n//       fill: false,\n//       lineTension: 0.5,\n//       backgroundColor: 'rgba(75,192,192,0.4)',\n//       borderColor: 'rgba(75,192,192,1)',\n//       borderCapStyle: 'butt',\n//       borderDash: [],\n//       borderDashOffset: 0.0,\n//       borderJoinStyle: 'miter',\n//       pointBorderColor: 'rgba(75,192,192,1)',\n//       pointBackgroundColor: '#fff',\n//       pointBorderWidth: 1,\n//       pointHoverRadius: 5,\n//       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//       pointHoverBorderColor: 'rgba(220,220,220,1)',\n//       pointHoverBorderWidth: 2,\n//       pointRadius: 1,\n//       pointHitRadius: 10,\n//       data: [20, 10, 15, 5, 15, 5, 20],\n//       // rtl: true,\n//     },\n//   ],\n// };\n// const opts: Chart.ChartOptions = {\n//   scales: {\n//     xAxes: [\n//       {\n//         stacked: true,\n//         display: false,\n//         // categoryPercentage: 1,\n//         // barPercentage: 1,\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         display: false,\n//         stacked: true,\n//         // categoryPercentage: 1,\n//         // barPercentage: 1,\n//       },\n//     ],\n//   },\n//   legend: {\n//     labels: {\n//       boxWidth: 12,\n//     },\n//   },\n//   plugins: {\n//     colorschemes: {\n//       scheme: 'tableau.ClassicMedium10',\n//     },\n//     /* ,datalabels: {\n//           formatter: (value, context) => { console.log(value,context)\n//             const data = context.chart.data;\n//             const { datasetIndex, dataIndex } = context;\n//             return `${data.calculatedData[datasetIndex][dataIndex]}% (${data.originalData[datasetIndex][dataIndex]})`;\n//           }\n//         }*/\n//     stacked100: { enable: true, replaceTooltipLabel: false },\n//   },\n//   maintainAspectRatio: false,\n//   tooltips: {\n//     mode: 'x',\n//     intersect: true,\n//     position: 'nearest',\n//     callbacks: {\n//       title: () => {\n//         return '';\n//       },\n//       /*      ,label: (tooltipItem, data) => {\n//             const datasetIndex = tooltipItem.datasetIndex;\n//             const datasetLabel = data.datasets[datasetIndex].label;\n//             // You can use two type values.\n//             // `data.originalData` is raw values,\n//             // `data.calculatedData` is percentage values, e.g. 20.5 (The total value is 100.0)\n//             const originalValue = data.originalData[datasetIndex][tooltipItem.index];\n//             const rateValue = data.calculatedData[datasetIndex][tooltipItem.index];\n//             return `${datasetLabel}: ${rateValue}% (${originalValue}E)`;\n//           }*/\n//     },\n//   },\n// };\n// const SleepGuid = () => {\n//   return (\n//     <div>\n//       <h1>수면 주기</h1>\n//       <p></p>\n//       <p>\n//         \b* 수면 주기는 개인마다 차이가 있으므로\b 계산한 수면 주기가 맞지 않을 경우에 +-5~30분 정도의 차이를 둬서 자신에게\n//         맞는 수면 주기를 계산하여 찾는걸 추천 드립니다!\n//       </p>\n//       <Line type=\"line\" data={data} options={opts} />\n//     </div>\n//   );\n// };\n// export default SleepGuid;\nimport React, { Component } from 'react';\nimport { render } from 'react-dom'; //import {HorizontalBar} from 'react-chartjs2';\n\nconst data = {\n  datasets: [{\n    label: 'ETH 3',\n    data: [6502]\n  }, {\n    label: 'EOS 4',\n    data: [5650]\n  }, {\n    label: 'BCH: 45.5',\n    data: [50]\n  }, {\n    label: '4.5 BTC',\n    data: [12530]\n  }, {\n    label: '14.5K TRX',\n    data: [7530]\n  }, {\n    label: '42 ETC',\n    data: [2530]\n  }, {\n    label: '422.5 BSV',\n    data: [34530]\n  }, {\n    label: '45 LTC',\n    data: [5130]\n  }, {\n    label: '4523 IOT',\n    data: [3530]\n  }, {\n    label: '145 DSH',\n    data: [5230]\n  }, {\n    label: '454 XRP',\n    data: [1530]\n  }, {\n    label: '14K EOS',\n    data: [530]\n  }]\n};\nconst opts = {\n  scales: {\n    xAxes: [{\n      stacked: true,\n      display: false,\n      categoryPercentage: 1,\n      barPercentage: 1\n    }],\n    yAxes: [{\n      display: false,\n      stacked: true,\n      categoryPercentage: 1,\n      barPercentage: 1\n    }]\n  },\n  legend: {\n    labels: {\n      boxWidth: 12\n    }\n  },\n  plugins: {\n    colorschemes: {\n      scheme: 'tableau.ClassicMedium10'\n    },\n\n    /* ,datalabels: {\n        formatter: (value, context) => { console.log(value,context)\n          const data = context.chart.data;\n          const { datasetIndex, dataIndex } = context;\n          return `${data.calculatedData[datasetIndex][dataIndex]}% (${data.originalData[datasetIndex][dataIndex]})`;\n        }\n      }*/\n    stacked100: {\n      enable: true,\n      replaceTooltipLabel: false\n    }\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'x',\n    intersect: true,\n    position: 'nearest',\n    callbacks: {\n      title: () => {\n        return '';\n      }\n      /*      ,label: (tooltipItem, data) => {\n          const datasetIndex = tooltipItem.datasetIndex;\n          const datasetLabel = data.datasets[datasetIndex].label;\n          // You can use two type values.\n          // `data.originalData` is raw values,\n          // `data.calculatedData` is percentage values, e.g. 20.5 (The total value is 100.0)\n          const originalValue = data.originalData[datasetIndex][tooltipItem.index];\n          const rateValue = data.calculatedData[datasetIndex][tooltipItem.index];\n          return `${datasetLabel}: ${rateValue}% (${originalValue}E)`;\n        }*/\n\n    }\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'React'\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'relative',\n          height: '90px',\n          width: '100%'\n        },\n        children: /*#__PURE__*/_jsxDEV(HorizontalBar, {\n          data: data,\n          options: opts,\n          type: \"horizontalBar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Start editing to see some magic happen :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nrender( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 230,\n  columnNumber: 8\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/hwan/Desktop/workspace/MostProject/sleepWell/src/components/calc/Guid/SleepGuid.tsx"],"names":["React","Component","render","data","datasets","label","opts","scales","xAxes","stacked","display","categoryPercentage","barPercentage","yAxes","legend","labels","boxWidth","plugins","colorschemes","scheme","stacked100","enable","replaceTooltipLabel","maintainAspectRatio","tooltips","mode","intersect","position","callbacks","title","App","constructor","props","state","name","height","width","document","getElementById"],"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","sourcesContent":["// import React from 'react';\n// import { Line } from 'react-chartjs-2';\n// import { Chart } from 'chart.js';\n\n// interface options {\n//   scale: string;\n//   yAxes: string;\n//   ticks: string;\n//   display: boolean;\n// }\n// interface AppProps {}\n// const data = {\n//   labels: ['자정', '2', '3', '4', '5', '6', '7', '8'],\n\n//   datasets: [\n//     {\n//       label: '수면 주기',\n//       display: false,\n//       fill: false,\n//       lineTension: 0.5,\n//       backgroundColor: 'rgba(75,192,192,0.4)',\n//       borderColor: 'rgba(75,192,192,1)',\n//       borderCapStyle: 'butt',\n//       borderDash: [],\n//       borderDashOffset: 0.0,\n//       borderJoinStyle: 'miter',\n//       pointBorderColor: 'rgba(75,192,192,1)',\n//       pointBackgroundColor: '#fff',\n//       pointBorderWidth: 1,\n//       pointHoverRadius: 5,\n//       pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n//       pointHoverBorderColor: 'rgba(220,220,220,1)',\n//       pointHoverBorderWidth: 2,\n//       pointRadius: 1,\n//       pointHitRadius: 10,\n//       data: [20, 10, 15, 5, 15, 5, 20],\n//       // rtl: true,\n//     },\n//   ],\n// };\n\n// const opts: Chart.ChartOptions = {\n//   scales: {\n//     xAxes: [\n//       {\n//         stacked: true,\n//         display: false,\n//         // categoryPercentage: 1,\n//         // barPercentage: 1,\n//       },\n//     ],\n//     yAxes: [\n//       {\n//         display: false,\n//         stacked: true,\n//         // categoryPercentage: 1,\n//         // barPercentage: 1,\n//       },\n//     ],\n//   },\n//   legend: {\n//     labels: {\n//       boxWidth: 12,\n//     },\n//   },\n//   plugins: {\n//     colorschemes: {\n//       scheme: 'tableau.ClassicMedium10',\n//     },\n//     /* ,datalabels: {\n//           formatter: (value, context) => { console.log(value,context)\n//             const data = context.chart.data;\n//             const { datasetIndex, dataIndex } = context;\n//             return `${data.calculatedData[datasetIndex][dataIndex]}% (${data.originalData[datasetIndex][dataIndex]})`;\n//           }\n//         }*/\n//     stacked100: { enable: true, replaceTooltipLabel: false },\n//   },\n//   maintainAspectRatio: false,\n//   tooltips: {\n//     mode: 'x',\n//     intersect: true,\n//     position: 'nearest',\n//     callbacks: {\n//       title: () => {\n//         return '';\n//       },\n//       /*      ,label: (tooltipItem, data) => {\n//             const datasetIndex = tooltipItem.datasetIndex;\n//             const datasetLabel = data.datasets[datasetIndex].label;\n//             // You can use two type values.\n//             // `data.originalData` is raw values,\n//             // `data.calculatedData` is percentage values, e.g. 20.5 (The total value is 100.0)\n//             const originalValue = data.originalData[datasetIndex][tooltipItem.index];\n//             const rateValue = data.calculatedData[datasetIndex][tooltipItem.index];\n//             return `${datasetLabel}: ${rateValue}% (${originalValue}E)`;\n//           }*/\n//     },\n//   },\n// };\n\n// const SleepGuid = () => {\n//   return (\n//     <div>\n//       <h1>수면 주기</h1>\n\n//       <p></p>\n//       <p>\n//         \b* 수면 주기는 개인마다 차이가 있으므로\b 계산한 수면 주기가 맞지 않을 경우에 +-5~30분 정도의 차이를 둬서 자신에게\n//         맞는 수면 주기를 계산하여 찾는걸 추천 드립니다!\n//       </p>\n//       <Line type=\"line\" data={data} options={opts} />\n//     </div>\n//   );\n// };\n\n// export default SleepGuid;\n\nimport React, { Component } from 'react';\nimport { render } from 'react-dom';\n//import {HorizontalBar} from 'react-chartjs2';\nimport { Line } from 'react-chartjs-2';\nimport { Chart } from 'chart.js';\n// import 'chartjs-plugin-colorschemes';\n// import 'chartjs-plugin-stacked100';\n// import 'chartjs-plugin-datalabels';\n\ninterface AppProps {}\ninterface AppState {\n  name: string;\n}\n\nconst data = {\n  datasets: [\n    { label: 'ETH 3', data: [6502] },\n    { label: 'EOS 4', data: [5650] },\n    { label: 'BCH: 45.5', data: [50] },\n    { label: '4.5 BTC', data: [12530] },\n    { label: '14.5K TRX', data: [7530] },\n    { label: '42 ETC', data: [2530] },\n    { label: '422.5 BSV', data: [34530] },\n    { label: '45 LTC', data: [5130] },\n    { label: '4523 IOT', data: [3530] },\n    { label: '145 DSH', data: [5230] },\n    { label: '454 XRP', data: [1530] },\n    { label: '14K EOS', data: [530] },\n  ],\n};\n\nconst opts: chartjs.ChartOptions = {\n  scales: {\n    xAxes: [\n      {\n        stacked: true,\n        display: false,\n        categoryPercentage: 1,\n        barPercentage: 1,\n      },\n    ],\n    yAxes: [\n      {\n        display: false,\n        stacked: true,\n        categoryPercentage: 1,\n        barPercentage: 1,\n      },\n    ],\n  },\n  legend: {\n    labels: {\n      boxWidth: 12,\n    },\n  },\n  plugins: {\n    colorschemes: {\n      scheme: 'tableau.ClassicMedium10',\n    },\n    /* ,datalabels: {\n        formatter: (value, context) => { console.log(value,context)\n          const data = context.chart.data;\n          const { datasetIndex, dataIndex } = context;\n          return `${data.calculatedData[datasetIndex][dataIndex]}% (${data.originalData[datasetIndex][dataIndex]})`;\n        }\n      }*/\n    stacked100: { enable: true, replaceTooltipLabel: false },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: 'x',\n    intersect: true,\n    position: 'nearest',\n    callbacks: {\n      title: () => {\n        return '';\n      },\n      /*      ,label: (tooltipItem, data) => {\n          const datasetIndex = tooltipItem.datasetIndex;\n          const datasetLabel = data.datasets[datasetIndex].label;\n          // You can use two type values.\n          // `data.originalData` is raw values,\n          // `data.calculatedData` is percentage values, e.g. 20.5 (The total value is 100.0)\n          const originalValue = data.originalData[datasetIndex][tooltipItem.index];\n          const rateValue = data.calculatedData[datasetIndex][tooltipItem.index];\n          return `${datasetLabel}: ${rateValue}% (${originalValue}E)`;\n        }*/\n    },\n  },\n};\n\nclass App extends Component<AppProps, AppState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'React',\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ position: 'relative', height: '90px', width: '100%' }}>\n          <HorizontalBar data={data} options={opts} type=\"horizontalBar\" />\n        </div>\n        <div>Start editing to see some magic happen :)</div>\n      </div>\n    );\n  }\n}\n\nrender(<App />, document.getElementById('root'));\n"]},"metadata":{},"sourceType":"module"}