{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport _defineProperty from \"/Users/hwan/Desktop/workspace/MostProject/sleepWell/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/hwan/Desktop/workspace/MostProject/sleepWell/src/pages/_app.tsx\",\n    _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { createContext } from 'react';\nimport Header from '../components/Header';\nimport { GlobalStyle } from '../styles/global-styles';\nimport { lightTheme, darkTheme } from '../styles/theme';\nimport { useDarkMode } from '../hooks/useDarkMode';\nexport const ThemeContext = /*#__PURE__*/createContext({\n  theme: lightTheme,\n  toggleTheme: () => {\n    return null;\n  }\n});\n\nconst app = ({\n  Component,\n  pageProps\n}) => {\n  _s();\n\n  const {\n    theme,\n    toggleTheme\n  } = useDarkMode();\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      theme,\n      toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {\n        theme: theme === lightTheme ? lightTheme : darkTheme\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(app, \"yM13La7Ia24hj42T1JMP3yq4fM4=\", false, function () {\n  return [useDarkMode];\n});\n\nexport default app;","map":{"version":3,"sources":["/Users/hwan/Desktop/workspace/MostProject/sleepWell/src/pages/_app.tsx"],"names":["React","createContext","Header","GlobalStyle","lightTheme","darkTheme","useDarkMode","ThemeContext","theme","toggleTheme","app","Component","pageProps"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,QAA6C,iBAA7C;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AAOA,OAAO,MAAMC,YAAY,gBAAGN,aAAa,CAAe;AACtDO,EAAAA,KAAK,EAAEJ,UAD+C;AAEtDK,EAAAA,WAAW,EAAE,MAAM;AACjB,WAAO,IAAP;AACD;AAJqD,CAAf,CAAlC;;AAOP,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAD,KAAwC;AAAA;;AAClD,QAAM;AAAEJ,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAyBH,WAAW,EAA1C;AAEA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEE,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAA9B;AAAA,2BACE;AAAA,8BACE,QAAC,WAAD;AAAa,QAAA,KAAK,EAAED,KAAK,KAAKJ,UAAV,GAAuBA,UAAvB,GAAoCC;AAAxD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,SAAD,oBAAeO,SAAf;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAZD;;GAAMF,G;UAC2BJ,W;;;AAajC,eAAeI,GAAf","sourcesContent":["import { AppProps } from 'next/app';\nimport React, { createContext } from 'react';\nimport Header from '../components/Header';\nimport { GlobalStyle } from '../styles/global-styles';\nimport { lightTheme, darkTheme, Theme } from '../styles/theme';\n\nimport { useDarkMode } from '../hooks/useDarkMode';\n\ninterface ContextProps {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nexport const ThemeContext = createContext<ContextProps>({\n  theme: lightTheme,\n  toggleTheme: () => {\n    return null;\n  },\n});\n\nconst app = ({ Component, pageProps }: AppProps) => {\n  const { theme, toggleTheme } = useDarkMode();\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      <>\n        <GlobalStyle theme={theme === lightTheme ? lightTheme : darkTheme} />\n        <Header />\n        <Component {...pageProps} />\n      </>\n    </ThemeContext.Provider>\n  );\n};\n\nexport default app;\n"]},"metadata":{},"sourceType":"module"}